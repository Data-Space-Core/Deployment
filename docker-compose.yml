services:
  # Nginx Reverse Proxy for handling HTTP and HTTPS traffic
  nginx:
    image: nginx:latest
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"   # Exposes HTTP on port 80
      - "443:443" # Exposes HTTPS on port 443
    environment:
      - OMEJDN_DOMAIN=digi4live.collab-cloud.eu
      - OMEJDN_PATH=/auth
      - UI_PATH=/
    volumes:
      - ./nginx.development.conf:/etc/nginx/nginx.conf # Nginx configuration
      - /etc/cert:/etc/cert/ # SSL certificates
    networks:
      - local
    depends_on:
      - broker-core
      - broker-fuseki
      - omejdn-server
      - omejdn-ui
      - connector
      - connector-database

  # Broker Core Service - Manages data connectors and catalog
  broker-core:
    image: ghcr.io/data-space-core/dsil-idsa-broker/core:latest
    container_name: broker
    volumes:
      - /etc/cert:/etc/cert/ # SSL certificates
    restart: always
    environment:
      - IDENTITY_JAVAKEYSTORE=/etc/cert/isstbroker-keystore.jks
      - SPARQL_ENDPOINT=http://broker-fuseki:3030/connectorData # Use container name for Fuseki
      - ELASTICSEARCH_HOSTNAME=broker-elasticsearch
      - SHACL_VALIDATION=true
      - DAPS_VALIDATE_INCOMING=true
      - COMPONENT_URI=https://digi4live.collab-cloud.eu/broker/ # Updated for domain prefix
      - COMPONENT_CATALOGURI=https://digi4live.collab-cloud.eu/broker/connectors/ # Updated for domain prefix
      - JWKS_TRUSTEDHOSTS=digi4live.collab-cloud.eu,daps
      - DAPS_URL=https://digi4live.collab-cloud.eu/auth
      - DAPS_JWKS_URL=https://digi4live.collab-cloud.eu/auth/jwks.json
    expose:
      - "8080" # Internal communication on port 8080
    networks:
      - local

  # Fuseki Service - Provides SPARQL endpoint for Broker Core
  broker-fuseki:
    image: ghcr.io/data-space-core/dsil-idsa-broker/fuseki:latest
    volumes:
      - broker-fuseki:/fuseki
    expose:
      - "3030" # Internal SPARQL communication on port 3030
    networks:
      - local

  # Omejdn Server - Handles OAuth2 and OpenID authentication
  omejdn-server:
    image: ghcr.io/data-space-core/dsil-omejdn-server/omejdn-server:latest
    container_name: daps
    hostname: daps
    restart: unless-stopped
    environment:
      - OMEJDN_ISSUER=https://digi4live.collab-cloud.eu/auth # Updated for domain prefix
      - OMEJDN_FRONT_URL=https://digi4live.collab-cloud.eu/auth # Updated for domain prefix
      - OMEJDN_OPENID=true
      - OMEJDN_ENVIRONMENT=${OMEJDN_ENVIRONMENT}
      - OMEJDN_ACCEPT_AUDIENCE=idsc:IDS_CONNECTORS_ALL
      - OMEJDN_DEFAULT_AUDIENCE=idsc:IDS_CONNECTORS_ALL
      - OMEJDN_ADMIN=${ADMIN_USERNAME}:${ADMIN_PASSWORD}
    volumes:
      - ./config:/opt/config
      - ./keys:/opt/keys # Keys and configurations
    networks:
      - local

  # Omejdn UI - Provides a user interface for managing Omejdn
  omejdn-ui:
    image: ghcr.io/fraunhofer-aisec/omejdn-ui:${UI_VERSION}
    restart: unless-stopped
    environment:
      - OIDC_ISSUER=https://digi4live.collab-cloud.eu/auth/ # Updated for domain prefix
      - API_URL=https://digi4live.collab-cloud.eu/auth/api/v1 # Updated for domain prefix
      - CLIENT_ID=adminUI
    networks:
      - local

  # Connector Database - PostgreSQL for Connector
  connector-database:
    image: postgres:13
    container_name: connector-database
    ports:
      - "5433:5432" # Exposes PostgreSQL on port 5433
    environment:
      - POSTGRES_USER=postgresuserb
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=connectorbdb
    volumes:
      - connector-database:/var/lib/postgresql/data # Data persistence
    networks:
      - local

  # Connector - Manages data provisioning with integration to PostgreSQL
  connector:
    image: ghcr.io/data-space-core/connector/stage:latest
    container_name: connector
    ports:
      - 8081:8081
    environment:
      - CONFIGURATION_PATH=/config/config.json
      - SERVER_PORT=8081
      - DAPS_URL=https://digi4live.collab-cloud.eu/auth
      - DAPS_TOKEN_URL=https://digi4live.collab-cloud.eu/auth/token
      - DAPS_KEY_URL=https://digi4live.collab-cloud.eu/auth/jwks.json
      - DAPS_INCOMING_DAT_DEFAULT_WELLKNOWN=/jwks.json
      - SERVER_SSLv_KEY-STORE=file:///conf/default-connector-keystore.p12
      - SPRING_DATASOURCE_URL=jdbc:postgresql://connector-database:5432/connectorbdb
      - SPRING_DATASOURCE_USERNAME=postgresuserb
      - SPRING_DATASOURCE_PASSWORD=password
      - SPRING_DATASOURCE_PLATFORM=postgres
      - SPRING_DATASOURCE_DRIVERCLASSNAME=org.postgresql.Driver
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect
    volumes:
      - ./conf/config.json:/config/config.json
      - ./conf/default-connector-keystore.p12:/conf/default-connector-keystore.p12
      - ./conf/truststore.p12:/config/truststore.p12
    networks:
      - local
    depends_on:
      - connector-database

  connector-registration:
    build:
      context: ./connector_registration
      dockerfile: Dockerfile
    container_name: connector-registration
    restart: unless-stopped
    ports:
      - "5001:5001"  # Expose Flask app on port 5001
    volumes:
      - ./connector_registration:/app  # Mount the app directory for development
      - ./scripts:/scripts  # Map the scripts directory
      - ./keys:/keys  # Map the keys directory
      - ./config:/config  # Map the configuration directory
    networks:
      - local
    depends_on:
      - connector

  connector-registration-user-interface:
    image: ghcr.io/data-space-core/connector-registration/stage:latest
    container_name: connector-registration-user-interface
    restart: unless-stopped
    ports:
      - "5002:8000"  # Expose Django app on port 8000
    environment:
      - DJANGO_SECRET_KEY=your-secret-key-here
      - DJANGO_DEBUG=True
      - DJANGO_ALLOWED_HOSTS=*
      - DJANGO_DB_ENGINE=django.db.backends.sqlite3
      - DJANGO_DB_NAME=db.sqlite3
      - DJANGO_LANGUAGE_CODE=en-us
      - DJANGO_TIME_ZONE=UTC
      - BASE_URL=https://digi4live.collab-cloud.eu/connector-registration/register-connector
    networks:
      - local

  #provider-ui:
  #  container_name: provide-user-interface
  #  image: ghcr.io/data-space-core/provide-user-interface/stage:latest
  #  command: python manage.py runserver 0.0.0.0:8000
  #  volumes:
  #    - .env:/app/.env
  #  ports:
  #    - "8091:8000"
  #  networks:
  #    - local
  
volumes:
  broker-fuseki: # Volume for Fuseki data
  connector-database: # Volume for Connector data

networks:
  local:
    driver: bridge # Bridge network for inter-service communication
